---
title: "C-Path R Training"
subtitle: "Advanced Data Wrangling Part I"
session: "01"
author: "Kelsey Gonzalez"
date: "May 26, 2021 &#8212; Day 1"
output:
  xaringan::moon_reader:
    css: 
      - default
      - css/mytheme.css
      - css/mytheme-fonts.css
    lib_dir: libs
    seal: true
    # includes:
    #   after_body: "libs/typed.js"
    self_contained: false
    nature:
      highlightStyle: googlecode
      highlightLines: true
      highlightLanguage: ["r"]
      countIncrementalSlides: false
      ratio: 16:9
      #ratio: 191:100
      beforeInit: "macros.js"
      slideNumberFormat: |
        <div class="progress-bar-container">
          <div class="progress-bar" style="width: calc(%current% / %total% * 100%);">
          </div>
        </div>
---

```{r setup, include = FALSE}
options(htmltools.dir.version = FALSE)
library(knitr)
library(tidyverse)
library(xaringanExtra)
library(countdown)
library(nhsrtheme)
library(NHANES)
library(flair)
library(icons)
library(kableExtra)
library(flipbookr)
# set default options
opts_chunk$set(echo=FALSE,
               collapse = TRUE,
               fig.width = 7.252,
               fig.height = 4,
               dpi = 300)

# set engines
knitr::knit_engines$set("markdown")
xaringanExtra::use_panelset()
xaringanExtra::use_tile_view()
xaringanExtra::use_clipboard()
xaringanExtra::use_share_again()

hexes <- function(x) {
  x <- rev(sort(x))
  markup <- function(pkg) glue::glue('<img src="img/{pkg}.png" class="title-hex">')
  res <- purrr::map_chr(x, markup)
  paste0(res, collapse = "")
}
```


---

template: question

`r icons::icon_style(icons::fontawesome("broom"), scale = 3)`
# Part Two: Tidy Data

---

# What is tidy data `r I(hexes(c("tidyr")))`
- Data sets are often described in terms of three elements: units, variables and observations:
  + Units: the items described by the data. 
    - They may be Observational or Experimental. 
    - They may be referred to as  units, subjects, individuals, or cases or other terms. 
    - They represent a population or a sample from a population, e.g., cars, people, or countries.
    - They are not the "units of measurement" but the items being measured.
    - They may be represented by variable, e.g., name, a combination of variables, e.g., country and year, or be implied and not explicitly represented by any variable (most common in summarized data), e.g., average scores for a group
  + Variable: a characteristic or attribute of each unit about which we have data, e.g., mpg, age, or GDP.
  + Observations: The single value for each variable for a given unit, e.g., 20 mpg, 31 years old, or \$20,513,000 US.

---
# Definition of Tidy Data `r I(hexes(c("tidyr")))`

- We define tidy data very simply: It is a rectangular data set (the same number of rows for each column) where the data is shaped to have:  
1.  **One unit per row.** 
2.  **One variable per column.**
3.  **One observation (or value) per cell (the intersection of each row and column).**

![](https://american-stat-412612.netlify.app/img/tidy-1.png)

---

# Is this tidy? #1 `r I(hexes(c("tidyr")))`
.pull-left[

1.  **One unit per row.** 
2.  **One variable per column.**
3.  **One observation (or value) per cell (the intersection of each row and column).**

]
.pull-right[
```{r}
tidyr::table2 %>% 
  kable()
```
]

-- 
No, violates rule #2 -  Cases and population should be different columns because they are different concepts. 

---

# Is this tidy? #2 `r I(hexes(c("tidyr")))`
.pull-left[

1.  **One unit per row.** 
2.  **One variable per column.**
3.  **One observation (or value) per cell (the intersection of each row and column).**

]
.pull-right[
```{r}
tidyr::table3 %>% 
  kable()
```
]
--
No, violates rule #3 - holds two variables in each cell. 

---

# Is this tidy? #3 `r I(hexes(c("tidyr")))`
.pull-left[

1.  **One unit per row.** 
2.  **One variable per column.**
3.  **One observation (or value) per cell (the intersection of each row and column).**

]
.pull-right[
```{r}
tidyr::table4a %>% 
  kable()

tidyr::table4b %>% 
  kable()
```
]
--
No, violates all rules - has each observation across two columns and each variable is its own table. 
---
# Is this tidy? #4 `r I(hexes(c("tidyr")))`
.pull-left[

1.  **One unit per row.** 
2.  **One variable per column.**
3.  **One observation (or value) per cell (the intersection of each row and column).**

]
.pull-right[
```{r}
tidyr::table1 %>% 
  kable()
```
]
--
Yes! Finally! `r emo::ji("tada")`

---

# pivot_longer `r I(hexes(c("tidyr")))`
Problem: One Attribute (implied variable) Appears In Multiple Columns.

- The first argument is the dataset to reshape (which you can pipe in)
- The second argument `cols = ` describes which columns need to be reshaped. 
  + You can use any of the tidyselect tidy helper functions, e.g., `starts_with()` or `num_range()` 
  + See "select" in help.
- The `names_to = ` is the name of the variable you want to create to hold *the column names*.
- The `values_to = `is the name of the variable you want to create to hold *the cell values*.

```{r longer-dummy, echo = TRUE, eval = FALSE}
data %>% 
  pivot_longer(cols = c(""), 
               names_to = "new name column", 
               values_to = "new values column")
```

---
```{r longer-1, include=FALSE}
table4a %>%
  pivot_longer(cols = c(`1999`, `2000`), 
               names_to = "Year", 
               values_to = "Cases" ) 
```

`r chunk_reveal("longer-1")`

---
name: your-turn
background-color: var(--my-red)
class: inverse

.left-column[
## Your turn<br>`r icons::fontawesome("edit")`<br>
]

.right-column[
### Let's experiment with pivot_longer
----

- read the csv from [http://bit.ly/monkey-mem](http://bit.ly/monkey-mem)
```{r echo = T, eval = F}
monkeys <- read_csv("http://bit.ly/monkey-mem")
head(monkeys)
```
- make it tidy `r icons::icon_style(icons::fontawesome("broom"))`


- Why does this code fail?
```{r echo = T, eval = F}
tidyr::table4a %>% 
  pivot_longer(cols = 1999, 2000, 
               names_to = "year", 
               values_to = "cases")
```
 
]

```{r count5}
countdown::countdown(minutes = 4, second = 0, 
                     update_every = 15,
                     left = 0 #position
                     )
```

---
```{r longer-exercise-1, include=FALSE}
monkeys <- read_csv("http://bit.ly/monkey-mem", col_types = cols())
monkeys %>%
  pivot_longer(cols = Week2:Week16,
               names_prefix = "Week",
               names_to = "Week", 
               values_to = "Percent" ) 
```

`r chunk_reveal("longer-exercise-1")`



---
How can we solve this?

```{r}
tidyr::who %>% 
  head() %>% 
  kable()
```

The data uses the original codes given by the World Health Organization. 
The column names for columns five through 60 are made by combining new_ 
- to a code for .my-coral[method of diagnosis] (rel = relapse, sn = negative pulmonary smear, sp = positive pulmonary smear, ep = extrapulmonary) 
- to a code for .my-coral[gender] (f = female, m = male) 
- to a code for .my-coral[age group] (014 = 0-14 yrs of age, 1524 = 15-24 years of age, 2534 = 25 to 34 years of age, etc).

---
template: live-coding

---
```{r advanced-longer, include=FALSE}
who %>% 
  pivot_longer(
  cols = new_sp_m014:newrel_f65,
  names_to = c("diagnosis", "gender", "age"),
  names_pattern = "new_?(.*)_(.)(.*)",
  values_to = "count")
```

`r chunk_reveal("advanced-longer")`


---
# pivot_wider `r I(hexes(c("tidyr")))`

Problem: One Observation's Attributes Appear in Multiple rows.
- One column contains variable names. 
- One column contains values for the different attributes i.e., implied variables.
- This can be more challenging to tidy as you have multiple variables to address

```{r wider-dummy, echo = TRUE, eval = FALSE}
data %>% 
  pivot_wider(id_cols = c(IDs),
              names_from = "original names", 
              values_from = "original values")
```


---
# pivot_wider `r I(hexes(c("tidyr")))`

![](https://american-stat-412612.netlify.app/img/tidy-8.png)

---
name: your-turn
background-color: var(--my-red)
class: inverse

.left-column[
## Your turn<br>`r icons::fontawesome("edit")`<br>
]

.right-column[
### Let's experiment with pivot_wider
----

- read the csv from [http://bit.ly/tidy_flowers](http://bit.ly/tidy_flowers)
```{r echo = T, eval = F}
flowers <- read_csv2("http://bit.ly/tidy_flowers")
slice(flowers,20:28)
flowers %>% 
  pivot_wider(id_cols = ___,
              names_from = _______, 
              values_from = ______)
```
- make it tidy `r icons::icon_style(icons::fontawesome("broom"))`


- Find the number of observations for each `Gender` and `Race1` group like we did earlier. Can transform this tidy format into an _untidy_ pivot table? This can be useful for presentations and reports. 

]

---
```{r wider-exercise-1, include=FALSE}
flowers <- read_csv2("http://bit.ly/tidy_flowers", col_types = cols())
flowers %>% 
  pivot_wider(id_cols = c(Time, replication),
              names_from = "Variable", 
              values_from = "Value")
```

`r chunk_reveal("wider-exercise-1")`

---
```{r wider-exercise-2, include=FALSE}
NHANES::NHANESraw %>% 
  count(Gender, Race1) %>% 
  pivot_wider(id_cols = Gender,
              names_from = "Race1",
              values_from = "n")
```

`r chunk_reveal("wider-exercise-2")`

---

# separate `r I(hexes(c("tidyr")))`

```{r separate-1}
head(table3) %>% 
  kable()
```

---

# separate `r I(hexes(c("tidyr")))`

You need to specify at least three arguments:  

1. The column you want to separate that has two (or more) variables,
2. The character vector of the names of the new variables, and
3. The character or numeric positions by which to separate out the new variables from the current column.

```{r separate-2, echo = TRUE, eval = FALSE}
data %>% 
  separate(col = "original var",
           into = c("new", "names"),
           sep = "/")
```

---

```{r separate-3, include=FALSE}
tidyr::table3 %>%
  separate(col = rate, 
           into = c("cases", "population"), 
           sep = "/")
```

`r chunk_reveal("separate-3")`

---
name: your-turn
background-color: var(--my-red)
class: inverse

.left-column[
## Your turn<br>`r icons::fontawesome("edit")`<br>
]

.right-column[
### Let's experiment with separate
----

- read the csv from [http://bit.ly/separate_flowers](http://bit.ly/separate_flowers)
```{r echo = T, eval = F}
flowers2 <- read_csv2("http://bit.ly/separate_flowers")
slice(flowers2,20:28)
flowers %>% 
  separate(col = ______,
           into = _____,
           sep = ____)
```
- make it tidy `r icons::icon_style(icons::fontawesome("broom"))`


- Take a look at the `NHANESraw` variable `HHIncome`. Can you use separate to make a lower income and upper income bracket? 

]

---
```{r separate-exercise-1, include=FALSE}
flowers <- read_csv2("http://bit.ly/separate_flowers", col_types = cols())
flowers %>% 
  separate(col = `Flowers/Intensity`, 
           into = c("Flowers", "Intensity"), 
           sep = "/")
```

`r chunk_reveal("separate-exercise-1")`

---
```{r separate-exercise-2, include=FALSE}
NHANES::NHANESraw %>% 
  select(starts_with("HHI")) %>% 
  separate(col = HHIncome, 
           into = c("lower_HHI", "upper_HHI"), 
           sep = "-")
```

`r chunk_reveal("separate-exercise-2")`


---

class: left

# Up Next `r I(hexes(c("forcats", "lubridate", "stringr", "glue", "purrr")))`
----
.pull-left[
### Day 2
- `case_when` & `ifelse`
- factors and `forcats`
- `lubridate`
- `stringr` & regex
- `glue`
]
.pull-right[
### Day 3
- relational data & joins
- `across()`
- `rowwise()`
- `distinct()`
- `purrr()`
]

---

class: goodbye-slide, inverse, middle, left

.pull-left[
<img src="https://kelseygonzalez.github.io/author/kelsey-e.-gonzalez/avatar.png" class = "rounded"/>

# Thank you!

### Here's where you can find me...

.right[
[kelseygonzalez.github.io `r icons::fontawesome("link")`](https://kelseygonzalez.github.io/)<br/>
[@KelseyEGonzalez `r icons::fontawesome("twitter")`](https://twitter.com/kelseyegonzalez)<br/>
[@KelseyGonzalez `r icons::icon_style(icons::fontawesome("github"), scale = 1)`](https://github.com/KelseyGonzalez)
]]

---
class: inverse, middle, left

## Acknowledgements:
[Slide template](https://spcanelon.github.io/xaringan-basics-and-beyond/)
[Lecture structure](https://american-stat-412612.netlify.app/)
[xaringan](https://github.com/yihui/xaringan)
[xaringanExtra](https://pkg.garrickadenbuie.com/xaringanExtra/#/)
[flipbookr](https://github.com/EvaMaeRey/flipbookr)
